<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on Thought for your thoughts</title>
		<link>https://ludvigknutsmark.github.io/posts/</link>
		<description>Recent content in Posts on Thought for your thoughts</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Sun, 05 May 2019 15:11:55 +0200</lastBuildDate>
		<atom:link href="https://ludvigknutsmark.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>Breaking AES GCM Part 1</title>
			<link>https://ludvigknutsmark.github.io/posts/breaking_aes_gcm_part1/</link>
			<pubDate>Sun, 05 May 2019 15:11:55 +0200</pubDate>
			
			<guid>https://ludvigknutsmark.github.io/posts/breaking_aes_gcm_part1/</guid>
			<description>This is a small two-part series where I will show some attacks and implementation of AES GCM, and why GCM is a good idea. Let&amp;rsquo;s get started!
Why does AES GCM exist? So it seems like AES is a bit complicated. Most people see AES and think - &amp;ldquo;Great! This can&amp;rsquo;t be broken&amp;rdquo;.
And sure, it isn&amp;rsquo;t feasible in any amount of time to get the key from a ciphertext, even when knowing the plaintext.</description>
			<content type="html"><![CDATA[

<p>This is a small two-part series where I will show some attacks and implementation of AES GCM, and why GCM is a good idea.
Let&rsquo;s get started!</p>

<h2 id="why-does-aes-gcm-exist">Why does AES GCM exist?</h2>

<p>So it seems like AES is a bit complicated. Most people see AES and think - &ldquo;Great! This can&rsquo;t be broken&rdquo;.</p>

<p>And sure, it isn&rsquo;t feasible in any amount of time to get the key from a ciphertext, even when knowing the plaintext. But there are other problems with the implemenation of AES. Let&rsquo;s look at the most basic mode of operation, AES ECB.</p>

<h3 id="ecb">ECB</h3>

<p>ECB, or Electronic Codebook is the simplest mode of operation. You divide the plaintext into blocks and encrypt the blocks separately.</p>

<p><img src="/AES_ECB.png" alt="image alt text" /></p>

<p>What&rsquo;s the problem with this? Two encrypted plaintexts will always be represented as the same ciphertext (if encrypted with the same key, of course).</p>

<h3 id="cbc">CBC</h3>

<p>Ok, ECB is bad. But what if we add another random element into the encryption of each block, so two encrypted plaintexts will not be represented as the same ciphertext. This seems like a good idea! Let&rsquo;s do it.</p>

<p><img src="/AES_CBC.png" alt="image alt text" /></p>

<p>CBC stands for Cipher Block Chaining, as the encryption of each block is dependant on the ciphertext from the previous block. This looks much better! But with this chaining comes other problems, like bitflipping attacks.</p>

<p>I&rsquo;ve written some code on a basic bitflipping attack <a href="https://raw.githubusercontent.com/ludvigknutsmark/Cryptopals_Solves/master/set2/challenge16.py" target="_blank">here</a>.
The basic idea of a bitflipping attack is that if the attacker know the plaintext, he/she can do some math to change the ciphertext into being decrypted into anything.
Oh, that&rsquo;s bad.</p>

<h3 id="ctr">CTR</h3>

<p>CTR stands for Counter. Instead of splitting the plaintext into blocks and padding it, we can have a counter with a random nonce (like IV) and XOR the &ldquo;keystream&rdquo; with the plaintext. This turns the AES block cipher into a stream cipher, which is a more logic way of looking at data. This is also suspectible to bitflipping attacks. <a href="https://raw.githubusercontent.com/ludvigknutsmark/Cryptopals_Solves/master/set4/challenge26.py" target="_blank">attack code</a>.</p>

<p>How do we fix this? By adding integrity checks of course! Which leads us perfectly into AES GCM.</p>

<h3 id="gcm">GCM</h3>

<p>GCM stands for Galois Counter Mode. This is bit more complex solution, since adding a simple hash after the ciphertext would fix nothing (since the attacker can modify the hash to the flipped code). GCM implements a type of <a href="https://en.wikipedia.org/wiki/Message_authentication_code" target="_blank">MAC</a>. This makes it near impossible for an attacker to fiddle with the ciphertext, since any change would be detected when comparing the hashes. And the attacker can&rsquo;t spoof the hash, since he/she doesn&rsquo;t know the secret.</p>

<p><img src="/AES_GCM.png" alt="image alt text" /></p>

<p>Some explanation:</p>

<ul>
<li>Auth Data 1: The Additional data which you can put into the G_HASH function. GCM is an AEAD (Authenticated Encryption Additional Data) algorithm.</li>
<li>mult_H: Is the Galois part. Is &ldquo;each round&rdquo; of the G_HASH function. The input data is multiplied with Ek(0^128) in a Galois Field (GF(2^128)).</li>
</ul>

<p>Galois field as a MAC is chosen because it actually allows the Auth Tag calculation to be computed in parallel, which makes it faster than for example CBC. And even more so, than a traditional SHA-1 MAC. And speed in cryptography is important.</p>

<h3 id="next-part-is-exploring-the-g-hash-function">Next part is exploring the G_HASH function</h3>
]]></content>
		</item>
		
		<item>
			<title>BTH_CTF{sM3ll_th3_sH3ll}</title>
			<link>https://ludvigknutsmark.github.io/posts/bthctf2019/</link>
			<pubDate>Wed, 01 May 2019 00:00:00 +0000</pubDate>
			
			<guid>https://ludvigknutsmark.github.io/posts/bthctf2019/</guid>
			<description>Hello, World! So, first ever post. Hope that I can keep this blog project going for quite some time atleast.
This weekend I (along with some classmates) organized our first ever CTF! It was amazing. We had so much fun, and so much work put into it. And it was so worth it. We had a total of 24 teams playing in our school overnight. Contestants from Dalarna, Linköping and of course our school.</description>
			<content type="html"><![CDATA[

<h2 id="hello-world">Hello, World!</h2>

<p>So, first ever post. Hope that I can keep this blog project going for quite some time atleast.</p>

<p>This weekend I (along with some classmates) organized our first ever CTF! It was amazing. We had so much fun, and so much work put into it. And it was so worth it.
We had a total of 24 teams playing in our school overnight. Contestants from Dalarna, Linköping and of course our school.</p>

<p>I was responsible for some of our crypto challenges, and some other (one reverse and two OSINT). I will be posting writeups for my challenges. Atleast those I released.</p>

<p>You can find pictures of the event <a href="https://photos.app.goo.gl/72aVV31mfduuJQ6G9" target="_blank">here</a>.</p>

<p>Huge thank you to our sponsors. SecureLink and IKEA!</p>
]]></content>
		</item>
		
	</channel>
</rss>
